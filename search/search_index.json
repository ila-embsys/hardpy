{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>HardPy is a python package for creating a test bench for devices. HardPy allows you to:</p> <ul> <li>Create test benches for devices using pytest;</li> <li>Use a browser to view, run and stop tests;</li> <li>Store the test result to the CouchDB database.</li> </ul>"},{"location":"#to-install","title":"To Install","text":"<pre><code>pip3 install hardpy\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#couchdb","title":"CouchDB","text":"<p>This is a simple instruction for Linux. For Windows, follow the instructions from the documentation.</p> <p>Launch CouchDB with Docker. Create <code>couchdb.ini</code> file:</p> <pre><code>[chttpd]\nenable_cors=true\n\n[cors]\norigins = *\nmethods = GET, PUT, POST, HEAD, DELETE\ncredentials = true\nheaders = accept, authorization, content-type, origin, referer, x-csrf-token\n</code></pre> <p>Run the Docker container from folder with couchdb.ini file:</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.3\n</code></pre> <p>Command for Windows:</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v .\\couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.3.2\n</code></pre>"},{"location":"#create-tests","title":"Create tests","text":"<p>Add simple test to <code>tests</code> folder</p> <pre><code># test_1.py\nimport pytest\n\ndef test_one():\n    assert 42 == 42\n</code></pre>"},{"location":"#operator-panel","title":"Operator panel","text":"<p>Launch <code>hardpy-panel</code> from tests folder or launch <code>hardpy-panel tests</code> and open page http://localhost:8000/ in browser.</p> HardPy operator panel"},{"location":"#test-report","title":"Test report","text":"<p>The last test report stores in runstore database, document - current. You can view the CouchDB instance through Fauxton web interface: http://127.0.0.1:5984/_utils</p> Database view"},{"location":"changelog/","title":"Changelog","text":"<p>Versions follow Semantic Versioning: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</p>"},{"location":"changelog/#hardpy-030","title":"HardPy 0.3.0","text":"<ul> <li>Add implementation of test dependencies without using third party plugins.</li> <li>Reduce the number of database calls.</li> <li>Speed up test collection.</li> </ul>"},{"location":"changelog/#hardpy-020","title":"HardPy 0.2.0","text":"<ul> <li>Add documentation site.</li> <li>Remove the ability to access the HardpyPlugin. Users can now only register through the ini file.</li> </ul>"},{"location":"changelog/#hardpy-010","title":"HardPy 0.1.0","text":"<ul> <li>Add pytest-hardpy and hardpy panel into one package.</li> <li>Add frontend data synchronization via CouchDB data replication to PouchDB.</li> <li>Add documentation.</li> <li>CouchDB is main database.</li> </ul>"},{"location":"about/development/","title":"Development","text":""},{"location":"about/development/#environment","title":"Environment","text":""},{"location":"about/development/#requirements","title":"Requirements","text":"<ul> <li>python version must be equal to or greater than  3.10;</li> <li>yarn version must be equal to or greater than 3.4.1;</li> <li>node.js version must be equal to or greater than 16.10.0;</li> <li>CouchDB version must be equal to or greater than 3.2.0;</li> </ul>"},{"location":"about/development/#conda","title":"Conda","text":"<p>Create a conda.yaml file if you prefer to work through Anaconda or Miniconda:</p> <pre><code>name: hardpy\nchannels:\n  - defaults\n  - conda-forge\ndependencies:\n  - python=3.10\n  - pip&gt;=22\n  - nodejs=20\n  - yarn=4.0.1\n  - pip:\n      - -r requirements.txt\n      - -r requirements-doc.txt\n</code></pre> <p>create environment:</p> <pre><code>conda env create -f conda.yaml\n</code></pre> <p>Activate:</p> <pre><code>conda activate hardpy\n</code></pre>"},{"location":"about/development/#venv","title":"venv","text":"<p>If you prefer to work through venv:</p> <pre><code>python -m venv venv\n</code></pre> <p>Activate:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Install dependencies:</p> <pre><code>pip install -r requirements.txt\npip install -r requirements-doc.txt\n</code></pre>"},{"location":"about/development/#frontend-building","title":"Frontend building","text":"<p>node.js and yarn are required to build the frontend.</p> <p>Use the <code>compile_front.sh</code> script from <code>scripts</code> folder or run the scripts manually:</p> <pre><code>pip3 install -r requirements.txt\npython3 -m build\n</code></pre> <p>For frontend rebuilding use the <code>recompile_front.sh</code> from <code>scripts</code> folder or run the scripts manually:</p> <pre><code>pip3 uninstall $PRJ -y\n\nrm -rf hardpy/hardpy_panel/frontend/dist\nrm -rf hardpy/hardpy_panel/frontend/node_modules\nrm -rf *.egg-info\nrm -rf dist\nrm -rf __pycache__\n\npip3 install -r requirements.txt\npython3 -m build\n</code></pre>"},{"location":"about/development/#launch","title":"Launch","text":"<ol> <li>Install dependencies or create environment.</li> <li>Compile frontend if it's the first launch.</li> <li>Launch CouchDB instance.</li> <li>Launch <code>hardpy-panel</code> with path to tests folder.</li> </ol> <p>Addresses:</p> <ul> <li>HardPy panel: http://localhost:8000/</li> <li>Fauxton CouchDB: http://127.0.0.1:5984/_utils/</li> </ul>"},{"location":"about/development/#documentation","title":"Documentation","text":""},{"location":"about/development/#server","title":"Server","text":"<p>Documentation server command is:</p> <pre><code>mkdocs serve\n</code></pre> <p>Documentation address: http://127.0.0.1:8000/</p>"},{"location":"about/development/#build","title":"Build","text":"<p>Documentation building command is:</p> <pre><code>mkdocs build\n</code></pre> <p>The result is in the folder <code>public</code>.</p>"},{"location":"documentation/database/","title":"Database","text":""},{"location":"documentation/database/#about","title":"About","text":"<p>We use CouchDB because it's a simple document-oriented NoSQL database. The database has two main purposes:</p> <ul> <li>Saving test report;</li> <li>Data synchronization with the web interface. Data synchronization uses the replication mechanism of CouchDB and PouchDB.</li> </ul> <p>The CouchDB version must be equal to or greater than the 3.2 version.</p>"},{"location":"documentation/database/#couchdb-instance","title":"CouchDB instance","text":"<p>This section explains how to launch and manage a CouchDB instance. After launching the database, it becomes available at the following address:</p> <p>http://127.0.0.1:5984/_utils/</p> <p>The internal settings of the database are contained in the couchDB.ini configuration file. It contains settings that define the behavior and operating parameters of the database. The username is set via the <code>COUCHDB_USER</code>variable, the password via <code>COUCHDB_PASSWORD</code>, and the port number via the <code>ports</code> section.</p>"},{"location":"documentation/database/#running-couchdb-with-docker","title":"Running CouchDB with Docker","text":"<ol> <li>Create <code>couchdb.ini</code> file.</li> </ol> <p><pre><code>[chttpd]\nenable_cors=true\n\n[cors]\norigins = *\nmethods = GET, PUT, POST, HEAD, DELETE\ncredentials = true\nheaders = accept, authorization, content-type, origin, referer, x-csrf-token\n</code></pre> 2. The Docker version must be 24.0.0 or higher. Run the Docker container (from the folder with the couchdb.ini file):</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.3\n</code></pre> <p>Command for Windows:</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v .\\couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.3.2\n</code></pre> <p>The container will be deleted after use.</p>"},{"location":"documentation/database/#running-couchdb-with-docker-compose","title":"Running CouchDB with Docker Compose","text":"<p>An example configuration for running CouchDB via Docker Compose is located in the <code>example/database/couchdb</code> folder. A shortened version of the instructions is described below.</p> <ol> <li>Create a <code>docker</code> directory in the project's root directory.</li> <li>Create a <code>couchdb.ini</code> file in the <code>docker</code> directory.</li> </ol> <p><pre><code>[chttpd]\nenable_cors=true\n\n[cors]\norigins = *\nmethods = GET, PUT, POST, HEAD, DELETE\ncredentials = true\nheaders = accept, authorization, content-type, origin, referer, x-csrf-token\n</code></pre> 3. Create a <code>docker-compose.yaml</code> file in project's root directory.</p> <p><pre><code>version: \"3.8\"\n\nservices:\n  couchserver:\n    image: couchdb:3.3.2\n    ports:\n      - \"5984:5984\"\n    environment:\n      COUCHDB_USER: dev\n      COUCHDB_PASSWORD: dev\n    volumes:\n      - ./docker/dbdata:/opt/couchdb/data\n      - ./docker/couchdb.ini:/opt/couchdb/etc/local.ini\n</code></pre> 4. Run docker compose in the root directory.</p> <p><pre><code>docker compose up\n</code></pre> 5. To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"documentation/database/#running-couchdb-with-binary-packages-in-linux","title":"Running CouchDB with binary packages in Linux","text":"<ol> <li>Use this instruction to install CouchDB </li> <li>The installer asks you if you want to install CouchDB as a standalone application or in a clustered configuration. Select <code>Standalone</code> and press Enter.</li> <li>You are prompted to enter the Erlang Node Name.  You can ask it in Terminal with the command <code>hostname -f</code></li> <li>Set the Erlang Magic Cookie.  This is a unique identifier, for example, <code>test1234</code></li> <li>Configure the network interfaces on which CouchDB will be bound. <code>127.0.0.1</code> is fine.</li> <li>Enter an admin password of your choice for CouchDB, press <code>Enter</code>, re-type the password and press <code>Enter</code> again to continue the installation.</li> <li>After launching the database, it becomes available at the following address http://127.0.0.1:5984/_utils/. Open it.</li> <li>First of all, in the <code>User Management</code> section in the <code>Create Admins</code> tab, create a user with the login <code>dev</code> and password <code>dev</code></li> <li>In the <code>Config</code> choose <code>CORS</code> and appoint <code>Enable CORS</code> with <code>All domains</code></li> </ol>"},{"location":"documentation/database/#to-disable-the-couchdb-service","title":"To disable the CouchDB service:","text":"<p>Remove packages: <pre><code>sudo apt remove --purge couchdb\n</code></pre> Remove GPG keys and repository: <pre><code>sudo rm /usr/share/keyrings/couchdb-archive-keyring.gpg\nsudo rm /etc/apt/sources.list.d/couchdb.list\n</code></pre> Clean APT cache: <pre><code>sudo apt clean\n</code></pre> Disable service: <pre><code>systemctl stop couchdb.service\nsystemctl disable couchdb.service\nsystemctl daemon-reload\nsystemctl reset-failed\n</code></pre></p>"},{"location":"documentation/database/#running-couchdb-with-binary-packages-in-windows","title":"Running CouchDB with binary packages in Windows","text":"<ol> <li>Use this instruction to install CouchDB </li> <li>Be sure to install CouchDB to a path with no spaces, such as <code>C:\\CouchDB</code>.</li> <li>Create a user with the login <code>dev</code> and password <code>dev</code> during the installation steps. Validate Credentials.</li> <li>Generate Random Cookie.</li> <li>After launching the database, it becomes available at the following address http://127.0.0.1:5984/_utils/. Open it.</li> <li>In the <code>Config</code> choose <code>CORS</code> and appoint <code>Enable CORS</code> with <code>All domains</code></li> </ol>"},{"location":"documentation/database/#database-in-pytest-hardpy","title":"Database in pytest-hardpy","text":""},{"location":"documentation/database/#description-of-databases","title":"Description of databases","text":"<p>The pytest plugin has 2 databases: statestore and runstore.</p> <ul> <li>The statestore database contains the document current, which is a JSON object that stores the current state of the test run without artifacts. The plugin updates the document as testing progresses using the StateStore class.</li> <li>The runstore database contains the document current, which is a JSON object that stores the current state of the test run with artifacts - a report on the current test run.</li> <li>The plugin updates the document as testing progresses using the RunStore class.</li> </ul> <p>A separate database is required to store the list of reports. The report database is used as an example of storing reports on past testing runs. It can be launched in the same instance as the statestore, runstore database, or in a different one. The database is accessed through the CouchdbLoader class, which can be called at the end of each launch. To read the current report, use the <code>get_current_report()</code> function.</p> <p>Sample code for saving a report at the end of testing:</p> <pre><code># conftest.py\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre> <p>HardPy users have the flexibility to choose their preferred database. They can write custom classes to record reports at the end of testing.</p>"},{"location":"documentation/database/#statestore-scheme","title":"Statestore scheme","text":"<p>The current document of the statestore database contains the following fields:</p> <ul> <li>_rev: current document revision;</li> <li>_id: unique document identifier;</li> <li>progress: test progress;</li> <li>stop_time: end time of testing in Unix seconds;</li> <li>timezone: timezone as a list of strings;</li> <li>start_time: testing start time in Unix seconds;</li> <li>status: test execution status;</li> <li>name: test suite name;</li> <li>dut: DUT information containing the serial number and additional information;</li> <li>test_stand: information about the test stand in the form of a dictionary.;</li> <li>modules: module information;</li> <li>drivers: information about drivers in the form of a dictionary.</li> </ul> <p>The dut block contains the following fields:</p> <ul> <li>serial_number: DUT serial number;</li> <li>info: A dictionary containing additional information about the DUT, such as batch, board revision, etc.</li> </ul> <p>The modules block contains the following fields:</p> <ul> <li>test_{module_name}: an object containing information about a specific module. Contains the following fields:<ul> <li>status: module test execution status;</li> <li>name: module name, by default the same as module_id;</li> <li>start_time: module testing start time in Unix seconds;</li> <li>stop_time: end time of module testing in Unix seconds;</li> <li>cases: an object containing information about each test case within the module. Contains the following fields:</li> <li>test_{test_name}: an object containing information about the test. Contains the following fields:<ul> <li>status: test execution status;</li> <li>name: test name, by default the same as case_id;</li> <li>start_time: test start time in Unix seconds;</li> <li>stop_time: test end time in Unix second;</li> <li>assertion_msg: error message if the test fails;</li> <li>msg: additional message</li> </ul> </li> </ul> </li> </ul> <p>Example of a current document:</p> <pre><code>{\n      \"_rev\": \"44867-3888ae85c19c428cc46685845953b483\",\n      \"_id\": \"current\",\n      \"progress\": 100,\n      \"stop_time\": 1695817266,\n      \"timezone\": [\n        \"CET\",\n        \"CET\"\n      ],\n      \"start_time\": 1695817263,\n      \"status\": \"failed\",\n      \"name\": \"hardpy-stand\",\n      \"dut\": {\n        \"serial_number\": \"92c5a4bb-ecb0-42c5-89ac-e0caca0919fd\",\n        \"info\": {\n          \"batch\": \"test_batch\",\n          \"board_rev\": \"rev_1\"\n        }\n      },\n      \"test_stand\": {\n        \"name\": \"Test stand 1\"\n      },\n      \"drivers\": {\n        \"driver_1\": \"driver info\",\n        \"driver_2\": {\n          \"state\": \"active\",\n          \"port\": 8000,\n        }\n      },\n      \"modules\": {\n        \"test_1_a\": {\n          \"status\": \"failed\",\n          \"name\": \"Module 1\",\n          \"start_time\": 1695816884,\n          \"stop_time\": 1695817265,\n          \"cases\": {\n            \"test_dut_info\": {\n              \"status\": \"passed\",\n              \"name\": \"Obtaining information about DUT\",\n              \"start_time\": 1695817263,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": null,\n              \"msg\": null\n            },\n            \"test_minute_parity\": {\n              \"status\": \"failed\",\n              \"name\": \"Test 1\",\n              \"start_time\": 1695817264,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": \"The test failed because minute 21 is odd! Try again!\",\n              \"msg\": [\n                \"Current minute 21\"\n              ],\n            },\n          }\n        },\n      }\n    }\n</code></pre>"},{"location":"documentation/database/#runstore-scheme","title":"Runstore scheme","text":"<p>The runstore database contains all the fields about the statestore database plus artifact fields for the test run, module, and case. The current document of runstore database contains the following fields:</p> <ul> <li>_rev: current document revision;</li> <li>_id: unique document identifier;</li> <li>progress: test progress;</li> <li>stop_time: end time of testing in Unix seconds;</li> <li>timezone: timezone as a list of strings;</li> <li>start_time: testing start time in Unix seconds;</li> <li>status: test execution status;</li> <li>name: test suite name;</li> <li>dut: DUT information containing the serial number and additional information;</li> <li>test_stand: information about the test stand in the form of a dictionary;</li> <li>drivers: information about drivers in the form of a dictionary;</li> <li>artifact: an object containing information about artifacts created during the test run;</li> <li>modules: module information.</li> </ul> <p>The dut block contains the following fields:</p> <ul> <li>serial_number: DUT serial number;</li> <li>info: A dictionary containing additional information about the DUT, such as batch, board revision, etc.</li> </ul> <p>The modules block contains the following fields:</p> <ul> <li>test_{module_name}: an object containing information about a specific module. Contains the following fields:<ul> <li>status: module test execution status;</li> <li>name: module name, by default the same as module_id;</li> <li>start_time: module testing start time in Unix seconds;</li> <li>stop_time: end time of module testing in Unix seconds;</li> <li>artifact: an object containing information about artifacts created during the test module process;</li> <li>cases: an object containing information about each test within the module. Contains the following fields:</li> <li>test_{test_name}: an object containing information about the test. Contains the following fields:<ul> <li>status: test execution status;</li> <li>name: test name, by default the same as case_id;</li> <li>start_time: test start time in Unix seconds;</li> <li>stop_time: test end time in Unix second;</li> <li>assertion_msg: error message if the test fails;</li> <li>msg: additional message;</li> <li>artifact: an object containing information about artifacts created during the test case process.</li> </ul> </li> </ul> </li> </ul> <p>Example of a current document:</p> <pre><code>{\n      \"_rev\": \"44867-3888ae85c19c428cc46685845953b483\",\n      \"_id\": \"current\",\n      \"progress\": 100,\n      \"stop_time\": 1695817266,\n      \"timezone\": [\n        \"CET\",\n        \"CET\"\n      ],\n      \"start_time\": 1695817263,\n      \"status\": \"failed\",\n      \"name\": \"hardpy-stand\",\n      \"dut\": {\n        \"serial_number\": \"92c5a4bb-ecb0-42c5-89ac-e0caca0919fd\",\n        \"info\": {\n          \"batch\": \"test_batch\",\n          \"board_rev\": \"rev_1\"\n        }\n      },\n      \"test_stand\": {\n        \"name\": \"Test stand 1\"\n      },\n      \"drivers\": {\n        \"driver_1\": \"driver info\",\n        \"driver_2\": {\n          \"state\": \"active\",\n          \"port\": 8000\n        }\n      },\n      \"artifact\": {\n        \"data_str\": \"456DATA\",\n        \"data_int\": 12345,\n        \"data_dict\": {\n          \"test_key\": \"456DATA\"\n        }\n      },\n      \"modules\": {\n        \"test_1_a\": {\n          \"status\": \"failed\",\n          \"name\": \"Module 1\",\n          \"start_time\": 1695816884,\n          \"stop_time\": 1695817265,\n          \"artifact\": {},\n          \"cases\": {\n            \"test_dut_info\": {\n              \"status\": \"passed\",\n              \"name\": \"Obtaining information about DUT\",\n              \"start_time\": 1695817263,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": null,\n              \"msg\": null,\n              \"artifact\": {\"data_str\": \"456DATA\"}\n            },\n            \"test_minute_parity\": {\n              \"status\": \"failed\",\n              \"name\": \"Test 1\",\n              \"start_time\": 1695817264,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": \"The test failed because minute 21 is odd! Try again!\",\n              \"msg\": [\n                \"Current minute 21\"\n              ],\n              \"artifact\": {\n                \"data_str\": \"123DATA\",\n                \"data_int\": 12345,\n                \"data_dict\": {\n                  \"test_key\": \"456DATA\"\n                }\n              }\n            },\n          }\n        },\n      }\n    }\n</code></pre>"},{"location":"documentation/hardpy_panel/","title":"HardPy panel","text":"<p>The hardpy panel or operator panel is a web interface that displays and controls the testing process in HardPy.</p>"},{"location":"documentation/hardpy_panel/#capability","title":"Capability","text":"<p>HardPy panel allows you to:</p> <ul> <li>Start and stop testing.</li> <li>Browse:<ul> <li>Test run name.</li> <li>Test run status.</li> <li>Test module name.</li> <li>Duration of test modules execution.</li> <li>Test module status.</li> <li>Test case name.</li> <li>Test case message.</li> <li>Test case status.</li> </ul> </li> <li>Browse current statestore state in debug mode.</li> </ul>"},{"location":"documentation/hardpy_panel/#usage","title":"Usage","text":"<p>You can launch hardpy panel by using the command <code>hardpy-panel [...]</code>, where <code>[...]</code> is a tests directory. After this open page http://localhost:8000/ in the browser.</p> <p>When the operator panel is running, you can run tests through the web interface or through the pytest launcher (in a terminal or from another application).</p>"},{"location":"documentation/hardpy_panel/#options","title":"Options","text":"<p>The operator panel has some options. To view all options run <code>hardpy-panel -h</code>.</p>"},{"location":"documentation/hardpy_panel/#db_user","title":"db_user","text":"<p>Statestore and runstore databases</p> <p>The CouchDB instance user name for the statestore and runstore databases. The default is dev.</p> <pre><code>-dbu DB_USER, --db_user DB_USER\n</code></pre>"},{"location":"documentation/hardpy_panel/#db_pswd","title":"db_pswd","text":"<p>The CouchDB instance password for the statestore and runstore databases. The default is dev.</p> <pre><code>-dbpw DB_PSWD, --db_pswd DB_PSWD\n</code></pre>"},{"location":"documentation/hardpy_panel/#db_port","title":"db_port","text":"<p>The CouchDB instance port number for the statestore and runstore databases. The default is 5984.</p> <pre><code>-dbp DB_PORT, --db_port DB_PORT\n</code></pre>"},{"location":"documentation/hardpy_panel/#db_host","title":"db_host","text":"<p>The CouchDB instance hostname for the statestore and runstore databases. The default is localhost.</p> <pre><code>-dbh DB_HOST, --db_host DB_HOST\n</code></pre>"},{"location":"documentation/hardpy_panel/#web_host","title":"web_host","text":"<p>The web interface hostname. The default is localhost.</p> <pre><code>-wh WEB_HOST, --web_host WEB_HOST\n</code></pre>"},{"location":"documentation/hardpy_panel/#web_port","title":"web_port","text":"<p>The web interface port number. The default is 8000.</p> <pre><code>-wp WEB_PORT, --web_port WEB_PORT\n</code></pre>"},{"location":"documentation/pytest_hardpy/","title":"pytest-hardpy","text":"<p>pytest-hardpy is a pytest plugin that helps you save test data in a database for test reporting and viewing test data in the web interface.</p>"},{"location":"documentation/pytest_hardpy/#plugin-registration","title":"Plugin registration","text":"<p>To use the pytest-hardpy you need to enable it. You can do this via the <code>pytest.ini</code> file.</p> <p>Example:</p> <pre><code># pytest.ini\n[pytest]\naddopts = --hardpy-pt\n</code></pre> <p>Another way to enable a plugin without <code>pytest.ini</code> file is to run tests with the option <code>--hardpy-pt</code>.</p> <pre><code>pytest --hardpy-pt tests\n</code></pre> <p>If tests are run via hardpy-panel, then the pytest-hardpy plugin will be enabled for tests by default.</p>"},{"location":"documentation/pytest_hardpy/#functions","title":"Functions","text":""},{"location":"documentation/pytest_hardpy/#set_dut_info","title":"set_dut_info","text":"<p>This function records a dictionary containing information about the test stand. When called again, the information will be added to DB.</p> <p>Arguments:</p> <ul> <li><code>info</code> (dict): DUT info</li> </ul> <p>Example:</p> <pre><code>def test_dut_info():\n    set_dut_info({\"batch\": \"test_batch\", \"board_rev\": \"rev_1\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_dut_serial_number","title":"set_dut_serial_number","text":"<p>Writes a string with a serial number. When called again, the Exception DuplicateSerialNumberError will be caused.</p> <p>Arguments:</p> <ul> <li><code>serial_number</code> (str): DUT serial number</li> </ul> <p>Example:</p> <pre><code>def test_serial_number():\n    set_dut_serial_number(\"1234\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_stand_info","title":"set_stand_info","text":"<p>Writes a dictionary with information about the test stand. When called again, the information will be added to DB.</p> <p>Arguments:</p> <ul> <li><code>info</code> (dict): test stand info</li> </ul> <p>Raises</p> <ul> <li><code>DuplicateSerialNumberError</code>: if serial number is already set</li> </ul> <p>Example:</p> <pre><code>def test_stand_info():\n    set_stand_info({\"name\": \"Test stand 1\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_case_artifact","title":"set_case_artifact","text":"<p>Writes a dictionary with a test case artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and case artifact must be separated.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_case_artifact():\n    set_case_artifact({\"data_str\": \"123DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_module_artifact","title":"set_module_artifact","text":"<p>Writes a dictionary with a module test artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and module artifact must be separated.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_module_artifact():\n    set_module_artifact({\"data_str\": \"456DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_run_artifact","title":"set_run_artifact","text":"<p>Writes a dictionary with a test run artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and run artifact must be separated.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_run_artifact():\n    set_run_artifact({\"data_str\": \"789DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_driver_info","title":"set_driver_info","text":"<p>The function records a dictionary containing information about the driver. The data is updated with new information each time the function is called.</p> <p>Driver data is stored in both statestore and runstore databases.</p> <p>Arguments:</p> <ul> <li><code>drivers</code> (dict): A dictionary of drivers, where keys are driver names and values are driver-specific data.</li> </ul> <p>Example:</p> <pre><code>def test_driver_info():\n    drivers = {\n        \"driver_1\": {\n            \"name\": \"Driver A\",\n            \"type\": \"network\"\n        }\n    }\n    set_driver_info(drivers)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_message","title":"set_message","text":"<p>Writes a string with a message. If a message is sent without a key, the key will be generated automatically and the messages will be appended. If the message is sent with a known key, it will be updated.</p> <p>Arguments:</p> <ul> <li><code>msg</code> (str): Message content.</li> <li><code>msg_key</code> (Optional[str]): Message ID. If not specified, a random ID will be generated.</li> </ul> <p>Example:</p> <pre><code>def test_message():\n    set_message(\"Test message\")\n    set_message(\"Update message 1\", \"msg_upd\")\n    set_message(\"Update message 2\", \"msg_upd\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#get_current_report","title":"get_current_report","text":"<p>Returns the current report from the database runstore.</p> <p>Returns:</p> <ul> <li>(ResultRunStore | None): report, or None if not found or invalid</li> </ul> <p>Example:</p> <pre><code>def test_current_report():\n    report = get_current_report()\n</code></pre>"},{"location":"documentation/pytest_hardpy/#class","title":"Class","text":""},{"location":"documentation/pytest_hardpy/#couchdbloader","title":"CouchdbLoader","text":"<p>Used to write reports to the database CouchDB.</p> <p>Example:</p> <pre><code># conftest\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"documentation/pytest_hardpy/#fixture","title":"Fixture","text":""},{"location":"documentation/pytest_hardpy/#post_run_functions","title":"post_run_functions","text":"<p>To execute actions at the end of testing, you can use the fixture post_run_functions. This fixture is a <code>list[Callable]</code> and you can write functions into it that must be executed at the end of testing.</p> <p>Fill this list in conftest.py and functions from this list will be called after tests run (at the end of pytest_sessionfinish).</p> <p>Returns:</p> <ul> <li>(list[Callable]): list of post run methods</li> </ul> <p>Example:</p> <pre><code># conftest.py file\ndef finish_executing():\n    print(\"Pytest finished\")\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"documentation/pytest_hardpy/#marker","title":"Marker","text":""},{"location":"documentation/pytest_hardpy/#case_name","title":"case_name","text":"<p>Sets a text name for the test case (default: function name)</p> <p>Example:</p> <pre><code>@pytest.mark.case_name(\"Simple case 1\")\ndef test_one():\n    assert 42 == 42\n</code></pre>"},{"location":"documentation/pytest_hardpy/#module_name","title":"module_name","text":"<p>Sets a text name for the test module (file) (default: module name)</p> <p>Example:</p> <pre><code>pytestmark = pytest.mark.module_name(\"Module 1\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#dependency","title":"dependency","text":"<p>Skips the test case/module if the main test fails/skipped/errored.</p> <p>Example:</p> <pre><code>#test_1.py\ndef test_one():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_one\")\ndef test_two():\n    assert True\n</code></pre>"},{"location":"documentation/pytest_hardpy/#options","title":"Options","text":"<p>pytest-hardpy has several options to run:</p>"},{"location":"documentation/pytest_hardpy/#hardpy_pt","title":"hardpy_pt","text":"<p>Option to enable the pytest-hardpy plugin.</p> <pre><code>--hardpy-pt\n</code></pre>"},{"location":"documentation/pytest_hardpy/#db_user","title":"db_user","text":"<p>The CouchDB instance user name for the statestore and runstore databases. The default is dev.</p> <pre><code>--hardpy-dbu DB_USER\n</code></pre>"},{"location":"documentation/pytest_hardpy/#db_pswd","title":"db_pswd","text":"<p>The CouchDB instance password for the statestore and runstore databases. The default is dev.</p> <pre><code>--hardpy-dbpw DB_PSWD\n</code></pre>"},{"location":"documentation/pytest_hardpy/#db_port","title":"db_port","text":"<p>The CouchDB instance port number for the statestore and runstore databases. The default is 5984.</p> <pre><code>--hardpy-dbp DB_PORT\n</code></pre>"},{"location":"documentation/pytest_hardpy/#db_host","title":"db_host","text":"<p>The CouchDB instance hostname for the statestore and runstore databases. The default is localhost.</p> <pre><code>--hardpy-dbh DB_HOST\n</code></pre>"},{"location":"documentation/structure/","title":"HardPy structure","text":"<p>HardPy includes several parts.</p>"},{"location":"documentation/structure/#pytest-hardpy","title":"pytest-hardpy","text":"<ul> <li>The pytest wrapper for running pytest from the HardPy operator panel.</li> <li>The pytest plugin with API for storing data in a database.</li> </ul>"},{"location":"documentation/structure/#hardpy-operator-panel","title":"HardPy operator panel","text":"<ul> <li>Web interface for viewing tests and starting/stopping tests.</li> <li>FastAPI application for processing frontend commands.</li> <li>PouchDB - web database for synchronizing data from CouchDB and the hardpy operator panel.</li> </ul>"},{"location":"documentation/structure/#couchdb","title":"CouchDB","text":"<ul> <li>Database to store current test data and store all test results.</li> </ul>"},{"location":"documentation/structure/#database-adapter","title":"Database adapter","text":"<ul> <li>HardPy allows you to use a simple database adapter to store test results in CouchDB.</li> <li>A developer can create a database adapter to store test results in any database.</li> </ul>"},{"location":"documentation/structure/#structural-scheme","title":"Structural scheme","text":""},{"location":"examples/couchdb_load/","title":"Couchdb load","text":"<p>This is an example of storing the test result in CouchDB. Test reports are written to the report database at the end of the testing process via CouchdbLoader.</p>"},{"location":"examples/couchdb_load/#how-to-start","title":"how to start","text":"<ol> <li>Launch CouchDH instance.</li> <li>Create a directory <code>&lt;dir_name&gt;</code> with the files described below.</li> <li>Launch <code>hardpy-panel &lt;dir_name&gt;</code>.</li> </ol>"},{"location":"examples/couchdb_load/#pytestini","title":"pytest.ini","text":"<p>It is a file of built-in configuration options that determine how live logging works and  enable pytest-hardpy plugin for launching via pytest.</p> <pre><code>[pytest]\nlog_cli = true\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s [%(levelname)s] %(message)s\nlog_cli_date_format = %H:%M:%S\naddopts = --hardpy-pt\n</code></pre>"},{"location":"examples/couchdb_load/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>save_report_to_couchdb</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <pre><code>import pytest\n\nfrom hardpy import (\n    CouchdbLoader,\n    CouchdbConfig,\n    get_current_report,\n)\n\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre>"},{"location":"examples/couchdb_load/#test_example_1py","title":"test_example_1.py","text":"<p>Contains two simple examples of a valid test.</p> <pre><code>import pytest\n\ndef test_one():\n    assert True\n\ndef test_two():\n    assert True\n</code></pre>"},{"location":"examples/couchdb_load/#test_example_2py","title":"test_example_2.py","text":"<p>Contains two simple examples: a valid test and an invalid test.</p> <pre><code>import pytest\n\ndef test_three():\n    assert True\n\ndef test_four():\n    assert False\n</code></pre>"},{"location":"examples/db_in_ram/","title":"Storing CouchDB Database in RAM","text":"<p>When using one of the methods below, the database data will be saved to a folder in temporary storage, and after the computer is turned off, the data will be deleted.</p> <p>Here are instructions for saving the database in RAM for different methods of launching the database:</p> <ul> <li>in linux with binary packages</li> <li>in linux with docker-compose.yaml</li> <li>in windows with binary packages</li> <li>in windows with docker-compose.yaml</li> </ul>"},{"location":"examples/db_in_ram/#linux","title":"linux","text":""},{"location":"examples/db_in_ram/#linux-with-binary-packages","title":"linux with binary packages","text":"<p>Start the database according to the instructions</p> <ul> <li>Create a CouchDB folder in the temporary file storage:</li> </ul> <pre><code>sudo mkdir /dev/shm/couchdb\n</code></pre> <ul> <li>Add editing rights to this folder:</li> </ul> <pre><code>sudo chmod 777 /dev/shm/couchdb\n</code></pre> <ul> <li>Edit the database_dir parameter in the database configuration file <code>/opt/couchdb/etc/default.ini</code>:</li> </ul> <pre><code>[couchdb]\ndatabase_dir = ./../../dev/shm/couchdb\n</code></pre> <ul> <li>Restart the couchdb service:</li> </ul> <pre><code>sudo service couchdb restart\n</code></pre>"},{"location":"examples/db_in_ram/#linux-with-docker-composeyaml","title":"linux with docker-compose.yaml","text":"<p>Start the database according to the instructions (steps 1-3)</p> <p>Example of <code>docker-compose.yaml</code> file with saving files in RAM:</p> <pre><code>version: \"3.8\"\n\nservices:\n  couchserver:\n    image: couchdb:3.3.2\n    ports:\n      - \"5984:5984\"\n    environment:\n      COUCHDB_USER: dev\n      COUCHDB_PASSWORD: dev\n    volumes:\n      - /dev/shm/couchdb:/opt/couchdb/data\n      - ./docker/couchdb.ini:/opt/couchdb/etc/local.ini\n</code></pre> <p>Run docker compose in the root directory to launch DB.</p> <p><pre><code>docker compose up\n</code></pre> To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"examples/db_in_ram/#windows","title":"windows","text":""},{"location":"examples/db_in_ram/#virtual-hard-disk-creation","title":"virtual hard disk creation","text":"<p>You need to create a virtual hard disk on which the database will be saved.</p> <ul> <li>Open the command prompt using <code>Win+R</code>, type <code>diskmgmt.msc</code>, and press <code>Enter</code>.</li> <li>Click Action &gt; Create Virtual Hard Disk.</li> <li>Specify any Location, set Size (e.g., 30 MB), choose VHD type and Fixed size.</li> <li>Right-click the created disk (left pane), select Initialize Disk, choose GUID Partition Table.</li> <li>Right-click the created disk (right pane), select New Simple Volume, Assign drive letter (e.g., <code>K</code>), click Next twice, then Finish.</li> <li>Create a folder named <code>couchdb</code> in the created drive (<code>K</code> in our case) using File Explorer.</li> </ul>"},{"location":"examples/db_in_ram/#database_dir-in-binary-couchdb-settings","title":"database_dir in binary couchdb settings","text":"<p>Start the database according to the instructions</p> <ul> <li>Open the file located at <code>C:/CouchDB/etc/default.ini</code> as administrator.</li> <li>Set the value of the database_dir parameter to <code>K:/couchdb</code>.</li> <li>Save and close the file.</li> <li>Open the Services console using <code>Win+R</code>, type <code>services.msc</code>, and press <code>Enter</code>.</li> <li>Locate the Apache CouchDB service and restart it.</li> </ul>"},{"location":"examples/db_in_ram/#database_dir-in-docker-compose-couchdb-settings","title":"database_dir in docker compose couchdb settings","text":"<p>Start the database according to the instructions (steps 1-3)</p> <p>In <code>docker-compose.yaml</code> file in <code>volumes</code> find the string:</p> <pre><code>./docker/dbdata:/opt/couchdb/data\n</code></pre> <p>Replace this string with next value:</p> <pre><code>K:/couchdb:/opt/couchdb/data\n</code></pre> <p>Run docker compose in the root directory to launch DB.</p> <p><pre><code>docker compose up\n</code></pre> To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"examples/hello_hardpy/","title":"Hello hardpy","text":"<p>This is the simplest example of using HardPy.</p>"},{"location":"examples/hello_hardpy/#how-to-start","title":"how to start","text":"<ol> <li>Launch CouchDH instance.</li> <li>Create a directory <code>&lt;dir_name&gt;</code> with the files described below.</li> <li>Launch <code>hardpy-panel &lt;dir_name&gt;</code>.</li> </ol>"},{"location":"examples/hello_hardpy/#test_simplepy","title":"test_simple.py","text":"<p>Contains the simplest example of a valid test.</p> <pre><code>import pytest\n\ndef test_one():\n    assert True\n</code></pre>"},{"location":"examples/minute_parity/","title":"Minute parity","text":"<p>This is an example of using pytest-hardpy functions, storing the result to CouchDB and writing a simple driver.</p>"},{"location":"examples/minute_parity/#how-to-start","title":"how to start","text":"<ol> <li>Launch CouchDH instance.</li> <li>Create a directory <code>&lt;dir_name&gt;</code> with the files described below.</li> <li>Launch <code>hardpy-panel &lt;dir_name&gt;</code>.</li> </ol>"},{"location":"examples/minute_parity/#pytestini","title":"pytest.ini","text":"<p>It is a file of built-in configuration options that determine how live logging works and  enable pytest-hardpy plugin for launching via pytest.</p> <pre><code>[pytest]\nlog_cli = true\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s [%(levelname)s] %(message)s\nlog_cli_date_format = %H:%M:%S\naddopts = --hardpy-pt\n</code></pre>"},{"location":"examples/minute_parity/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>finish_executing</code>;</li> <li>The example of devices used as a fixture in <code>driver_example</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> <li>The module log is created in fixture <code>module_log</code>;</li> </ul> <pre><code>import logging\nimport pytest\n\nfrom hardpy import (\n    CouchdbLoader,\n    CouchdbConfig,\n    get_current_report,\n)\nfrom driver_example import DriverExample\n\n@pytest.fixture(scope=\"module\")\ndef module_log(request):\n    log_name = request.module.__name__\n    yield logging.getLogger(log_name)\n\n@pytest.fixture(scope=\"session\")\ndef driver_example():\n    example = DriverExample()\n    yield example\n    example.random_method()\n\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"examples/minute_parity/#driver_examplepy","title":"driver_example.py","text":"<p>An example of writing a simple device driver. The driver returns the current minute in the OS.</p> <pre><code>import datetime\nfrom logging import getLogger\n\nclass DriverExample(object):\n    def __init__(self):\n        self._log = getLogger(__name__)\n\n    @property\n    def current_minute(self):\n        current_time = datetime.datetime.now()\n        return int(current_time.strftime(\"%M\"))\n\n    def random_method(self):\n        self._log.warning(\"Random method\")\n</code></pre>"},{"location":"examples/minute_parity/#test_1py","title":"test_1.py","text":"<p>Contains tests related to preparation for the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>The device under test (DUT) info is stored in the database in <code>test_dut_info</code>;</li> <li>The test stand info is store in the database in <code>test_stand_info</code>;</li> </ul> <pre><code>import logging\nfrom uuid import uuid4\n\nimport pytest\nimport hardpy\n\npytestmark = pytest.mark.module_name(\"Testing preparation\")\n\n@pytest.mark.case_name(\"DUT info\")\ndef test_dut_info(module_log: logging.Logger):\n    serial_number = str(uuid4())[:6]\n    module_log.info(f\"DUT serial number {serial_number}\")\n    hardpy.set_dut_serial_number(serial_number)\n    info = {\"batch\": \"test_batch\", \"board_rev\": \"rev_1\"}\n    hardpy.set_dut_info(info)\n    assert True\n\n@pytest.mark.case_name(\"Test stand info\")\ndef test_stand_info(module_log: logging.Logger):\n    test_stand_name = \"Stand 1\"\n    module_log.info(f\"Stand name: {test_stand_name}\")\n    info = {\"name\": \"Test stand 1\"}\n    hardpy.set_stand_info(info)\n    assert True\n</code></pre>"},{"location":"examples/minute_parity/#test_2py","title":"test_2.py","text":"<p>Contains basic tests:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of using a driver to get the current minute in <code>test_minute_parity</code>;</li> <li>An example of saving a test case artifact to the database using <code>set_case_artifact</code>;</li> </ul> <pre><code>import pytest\nimport hardpy\n\nfrom driver_example import DriverExample\n\npytestmark = pytest.mark.module_name(\"Main tests\")\n\n@pytest.mark.case_name(\"Minute check\")\ndef test_minute_parity(driver_example: DriverExample):\n    minute = driver_example.current_minute\n    hardpy.set_message(f\"Current minute {minute}\")\n    result = minute % 2\n    data = {\"minute\": minute}\n    hardpy.set_case_artifact(data)\n    assert (result == 0), f\"The test failed because {minute} is odd! Try again!\"\n</code></pre>"},{"location":"examples/minute_parity/#test_3py","title":"test_3.py","text":"<p>Contains the final tests of the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of setting and updating a message for a web interface using <code>set_message</code>;</li> <li><code>test_3</code> depends on <code>test_minute_parity</code> from <code>test_2</code>.  Dependency is set to <code>pytest.mark.dependency</code>.  If <code>test_2::test_minute_parity</code> fails, <code>test_3</code> will be skipped</li> </ul> <pre><code>from time import sleep\n\nimport pytest\nimport hardpy\n\npytestmark = [\n    pytest.mark.module_name(\"End of testing\"),\n    pytest.mark.dependency(\"test_2::test_minute_parity\"),\n]\n\n@pytest.mark.case_name(\"Final case\")\ndef test_one():\n    for i in range(5, 0, -1):\n        hardpy.set_message(f\"Time left until testing ends {i} s\", \"updated_status\")\n        sleep(1)\n    hardpy.set_message(\"Testing ended\", \"updated_status\")\n    assert True\n</code></pre>"},{"location":"examples/multiple_stands/","title":"Multiple stands","text":"<p>This is an example of running multiple stands on one PC.</p> <p>The example implements the launch of two stands and three CouchDB Instances. </p> <p>Each stand will record reports on the conducted testing in the CouchDB Instance assigned to it in the runstore and statestore databases. The third CouchDB Instance is needed to store reports in the report database on each conducted test of each stand.</p> <p>You can learn more about storing reports here Couchdb instance.</p>"},{"location":"examples/multiple_stands/#projects","title":"projects","text":"<ul> <li>Create 2 separate projects. Add a simple test to the <code>tests</code> folder of each project.</li> </ul> <pre><code># pytest.ini\n[pytest]\naddopts = --hardpy-pt\n</code></pre> <p><pre><code># test_1.py\nimport pytest\n\ndef test_one():\n    assert True\n</code></pre> * Create another project for the CouchDB instance to store the report history.</p>"},{"location":"examples/multiple_stands/#databases","title":"databases","text":"<p>Create a separate CouchDB Instance for each project, and use a different port for each.</p> <p>To create a CouchDB Instance use CouchDH instance instruction.</p> <ul> <li>Create a <code>couchdb.ini</code> file in each project.</li> <li>Launch the next script from the folder with the <code>couchdb.ini</code> file:</li> </ul> <p><pre><code>docker run 6--name tests_hardpy -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini  couchdb:3.3\n</code></pre> Where:</p> <ul> <li><code>--name tests_hardpy</code> - container name</li> <li><code>-p 5984:5984</code> - database port (use a different port for each)</li> <li><code>-e COUCHDB_USER=dev</code> - user name</li> <li><code>-e COUCHDB_PASSWORD=dev</code> - password</li> </ul> <p>For example, run a second database on port 5985:</p> <pre><code>docker run --name tests_hardpy_2 -p 5985:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini  couchdb:3.3\n</code></pre> <p>For example, run a third database on port 5986:</p> <pre><code>docker run --name tests_hardpy_3 -p 5986:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini  couchdb:3.3\n</code></pre>"},{"location":"examples/multiple_stands/#conftestpy","title":"conftest.py","text":"<p>Create in the folder of each stand <code>conftest.py</code> file. Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>save_report_to_couchdb</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <p>To store reports from all booths in the third CouchDB Instance, specify the port numbers of this CouchDB Instance in the file <code>conftest.py</code> in the folder of each stand.</p> <pre><code>import pytest\n\nfrom hardpy import (\n    CouchdbLoader,\n    CouchdbConfig,\n    get_current_report,\n)\n\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig(port=5986))\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre> <ul> <li><code>5986</code> - port of the database with reports</li> </ul>"},{"location":"examples/multiple_stands/#operator-panels","title":"operator panels","text":"<p>In projects with tests, configure a connection to its own database for storing state and to its own operator panel. To launch project with connection to database use script:</p> <pre><code>hardpy-panel -dbp 5984 -wp 8000 &lt;dir_name&gt;/tests\n</code></pre> <ul> <li><code>5984</code> - port of database</li> <li><code>8000</code> - operator-panel port (frontend)</li> <li><code>&lt;dir_name&gt;/tests</code> - the path to the folder with the tests</li> </ul> <p>For another project, use different ports:</p> <pre><code>hardpy-panel -dbp 5985 -wp 8001 tests\n</code></pre>"},{"location":"examples/skip_test/","title":"Skip test","text":"<p>This is an example of using the pytest-hardpy functions with a test dependency on another test and skipping tests.</p>"},{"location":"examples/skip_test/#how-to-start","title":"how to start","text":"<ol> <li>Launch CouchDH instance.</li> <li>Create a directory <code>&lt;dir_name&gt;</code> with the files described below.</li> <li>Specify the dependency in the file <code>pyproject.toml</code></li> <li>Launch <code>hardpy-panel &lt;dir_name&gt;</code>.</li> </ol>"},{"location":"examples/skip_test/#pytestini","title":"pytest.ini","text":"<p>Enable the pytest-hardpy plugin.</p> <pre><code># pytest.ini\n[pytest]\naddopts = --hardpy-pt\n</code></pre>"},{"location":"examples/skip_test/#description","title":"description","text":"<p>If a test case/module that a test case/module depends on fails, errors or is skipped, the dependent test case/module will also be skipped. A module is considered passed only if all module tests passed. If these dependencies are incorrect, the tests will not run.</p> <p>To use:</p> <ul> <li>Add the line <code>@pytest.mark.dependency()</code> before independent tests.</li> <li>Add the line <code>@pytest.mark.dependency(test_1::test_one)</code> before the dependent test, if a test that a test depends on is in the same file.</li> <li>Add the line <code>@pytest.mark.dependency(test_1)</code> before the dependent test, if the test depends on the module.</li> </ul> <p>Test/module name formats:</p> <ul> <li><code>test_1</code> - if depends on the test module</li> <li><code>test_1::test_one</code> - if depends on the test case</li> </ul>"},{"location":"examples/skip_test/#example-of-case-by-case-dependence","title":"Example of case by case dependence","text":"<pre><code>import pytest\n\ndef test_one():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_one\")\ndef test_two():\n    assert False\n</code></pre> <p><code>test_one</code> is marked as a dependency for <code>test_two</code> using <code>@pytest.mark.dependency(\"test_1::test_one\")</code>. If <code>test_one</code>, then <code>test_two</code> will be skipped.</p>"},{"location":"examples/skip_test/#example-of-module-by-module-dependence","title":"Example of module by module dependence","text":""},{"location":"examples/skip_test/#test_1py","title":"test_1.py","text":"<pre><code>import pytest\n\ndef test_one():\n    assert False\n</code></pre>"},{"location":"examples/skip_test/#test_2py","title":"test_2.py","text":"<pre><code>import pytest\n\npytestmark = pytest.mark.dependency(\"test_1\")\n\ndef test_one():\n    assert True\n</code></pre> <p>Module <code>test_2</code> depends on module <code>test_1</code>. If an error occurs in module <code>test_1</code>, all tests in module <code>test_2</code> will be skipped.</p>"},{"location":"features/features/","title":"Features","text":""},{"location":"features/features/#based-on-pytest","title":"Based on pytest","text":"<p>HardPy includes the pytest-hardpy plugin for pytest. Compatible with pytest versions above 7. You can run tests not only through the operator panel but also through the pytest itself.</p>"},{"location":"features/features/#document-oriented-nosql-database","title":"Document-oriented NoSQL database","text":"<p>HardPy uses CouchDB as its database but you can write final result to any database because CouchDB stores data in a simple document. Developers can create their adapter for any database and store the test report in a way that suits them. By default HardPy allows you to store all reports in CouchDB. HardPy is compatible with CouchDB versions above 3.2.</p>"},{"location":"features/features/#tests-view-in-browser","title":"Tests view in browser","text":"<p>HardPy includes a React application - HardPy operator panel. It allows you to use a browser to view your tests and write test results to a database.</p>"},{"location":"features/features/#modern-python","title":"Modern python","text":"<p>HardPy is based on the python 3.10 and supports versions 3.11, 3.12.</p>"}]}